using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using LibCommon;
using System.Xml;
using LibCommonControl;

namespace LibCommonForm
{
    public partial class SelectTunnelSimple : BaseControl
    {
        // 巷道编号，无效巷道ID均使用
        private int _iTunnelId = Const.INVALID_ID;

        //声明巷道名称更改委托
        public delegate void TunnelNameChangedEventHandler(object sender, TunnelEventArgs e);
        //巷道名称更改事件
        public event TunnelNameChangedEventHandler TunnelNameChanged;
        //在其他类当中如果需要对巷道名称改变事件进行处理可按下列方式实现：
        //1,在其他类当中定义事件处理函数，如：void InheritTunnelNameChanged(object sender, TunnelEventArgs e);
        //2,注册方法,如：_selectTunnelUserControl.TunnelNameChanged += new TunnelNameChangedEventHandler(InheritTunnelNameChanged);

        public SelectTunnelSimple()
        {
            InitializeComponent();
        }

        public SelectTunnelSimple(MainFrm mainFrm)
        {
            this.MainForm = mainFrm;
            InitializeComponent();
        }

        /// <summary>
        /// 获取选择的巷道的ID，如果没有获取到巷道ID，则返回0。
        /// </summary>
        public int ITunnelId
        {
            get { return _iTunnelId; }
            set { _iTunnelId = value; }
        }

        private void SelectTunnelSimple_Load(object sender, EventArgs e)
        {
            if (System.IO.File.Exists(@"RecentTunnels.xml"))
            {
                XmlDocument doc = new XmlDocument();
                string path = @"RecentTunnels.xml";
                XmlReaderSettings setting = new XmlReaderSettings();
                setting.DtdProcessing = DtdProcessing.Parse;

                XmlReader reader = XmlReader.Create(path, setting);

                doc.Load(reader);

                XmlNodeList nodes = doc.DocumentElement.SelectNodes("/Tunnels/Tunnel");

                //List<TunnelSimple> tunnels = new List<TunnelSimple>();

                TunnelSimple firstTS = new TunnelSimple(-1, "已选择的巷道");
                cbxTunnel.Items.Add(firstTS);

                foreach (XmlNode node in nodes)
                {
                    string id = node.SelectSingleNode("ID").InnerText;
                    string name = node.SelectSingleNode("Name").InnerText;
                    TunnelSimple tunnel = new TunnelSimple(int.Parse(id), name);
                    cbxTunnel.Items.Add(tunnel);
                }

                cbxTunnel.SelectedIndex = 0;
            }
        }

        /**
         *  Choose tunnel from the database.
         */
        private void btnChooseTunnel_Click(object sender, EventArgs e)
        {
            SelectTunnelDlg dlg = new SelectTunnelDlg(this.MainForm);
            if (DialogResult.OK == dlg.ShowDialog())
            {
                int index = -1;
                bool alreadyExist = false;
                foreach (TunnelSimple tunnel in this.cbxTunnel.Items)
                {
                    index++;
                    if (tunnel.Id == dlg.tunnelId)
                    {
                        alreadyExist = true;
                        break;
                    }
                }

                // remove the tunnel that already exists.
                if (alreadyExist)
                    cbxTunnel.Items.RemoveAt(index);

                TunnelSimple ts = new TunnelSimple(dlg.tunnelId, dlg.tunnelName);
                // Set the new selected tunnel.
                if (ts.Name != null)
                {
                    index = cbxTunnel.Items.Add(ts);
                    cbxTunnel.SelectedIndex = index;
                }

                // Write the recent used tunnel to XML
                XmlWriterSettings settings = new XmlWriterSettings();
                settings.Indent = true;

                try
                {
                    XmlWriter writer = XmlWriter.Create("RecentTunnels.xml", settings);
                    writer.WriteStartDocument();
                    writer.WriteComment("This file is generated by the program.");
                    writer.WriteStartElement("Tunnels");

                    for (int i = 1; i < this.cbxTunnel.Items.Count; i++)
                    {
                        TunnelSimple tunnel = this.cbxTunnel.Items[i] as TunnelSimple;
                        writer.WriteStartElement("Tunnel");

                        writer.WriteElementString("ID", tunnel.Id.ToString());   // <-- These are new
                        writer.WriteElementString("Name", tunnel.Name);
                        writer.WriteEndElement();
                    }

                    writer.WriteEndElement();
                    writer.WriteEndDocument();

                    writer.Flush();
                    writer.Close();
                }
                catch (Exception)
                {
                    Alert.alert("服务器繁忙，请稍候再试!");
                }
            }
        }

        private void cbxTunnel_SelectedIndexChanged(object sender, EventArgs e)
        {
            TunnelSimple ts = this.cbxTunnel.SelectedItem as TunnelSimple;
            _iTunnelId = ts.Id;
            //MessageBox.Show("tunnel id=" + _iTunnelId);

            //调用事件方法，以便外部能够响应巷道名称改变事件。
            try
            {
                if (TunnelNameChanged != null && _iTunnelId != -1)
                {
                    TunnelEventArgs arg = new TunnelEventArgs(_iTunnelId);
                    TunnelNameChanged(this, arg);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("未正常注册TunnelNameChanged事件: " + ex.Message);
            }
        }

        // 按delete键，删除选中的tunnel
        private void cbxTunnel_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                try
                {
                    int currentItem = this.cbxTunnel.SelectedIndex;
                    if (currentItem > 0)
                    {
                        cbxTunnel.Items.RemoveAt(currentItem);
                        if (this.cbxTunnel.Items.Count > 0)
                            this.cbxTunnel.SelectedIndex = (currentItem > 0) ? currentItem - 1 : currentItem;


                        // 覆盖RecentTunnels.xml
                        // Write the recent used tunnel to XML
                        XmlWriterSettings settings = new XmlWriterSettings();
                        settings.Indent = true;

                        XmlWriter writer = XmlWriter.Create("RecentTunnels.xml", settings);
                        writer.WriteStartDocument();
                        writer.WriteComment("This file is generated by the program.");

                        writer.WriteStartElement("Tunnels");

                        for (int i = 1; i < this.cbxTunnel.Items.Count; i++)
                        {
                            TunnelSimple tunnel = this.cbxTunnel.Items[i] as TunnelSimple;
                            writer.WriteStartElement("Tunnel");

                            writer.WriteElementString("ID", tunnel.Id.ToString());   // <-- These are new
                            writer.WriteElementString("Name", tunnel.Name);
                            writer.WriteEndElement();
                        }

                        writer.WriteEndElement();
                        writer.WriteEndDocument();

                        writer.Flush();
                        writer.Close();
                    }
                }
                catch (Exception ex)
                {
                    //Console.WriteLine(ex.ToString());
                    MessageBox.Show("删除错误: " + ex.Message);
                }
            }
        }

        /// <summary>
        /// 添加临时的巷道选择选项
        /// </summary>
        /// <param name="ts"></param>
        public void SelectTunnelItemWithoutHistory(TunnelSimple ts)
        {
            foreach (var item in this.cbxTunnel.Items)
            {
                if (((TunnelSimple)item).Name == ts.Name)
                {
                    this.cbxTunnel.SelectedItem = item;
                    return;
                }
            }
            this.cbxTunnel.Items.Add(ts);
            this.cbxTunnel.SelectedItem = ts;
        }
    }
}
