using System;
using System.Globalization;
using System.Linq;
using System.Windows.Forms;
using System.Xml;
using LibEntity;

namespace LibCommonForm
{
    public partial class SelectTunnelSimple : UserControl
    {

        public SelectTunnelSimple()
        {
            InitializeComponent();
        }

        public Tunnel SelectedTunnel { get; set; }

        public void SetTunnel(Tunnel tunnel)
        {
            SelectedTunnel = tunnel;
            foreach (Tunnel i in from Tunnel i in cbxTunnel.Items where i.TunnelId == tunnel.TunnelId select i)
            {
                cbxTunnel.SelectedItem = i;
                return;
            }
            cbxTunnel.Items.Add(tunnel);
            cbxTunnel.SelectedItem = tunnel;
        }

        private void SelectTunnelSimple_Load(object sender, EventArgs e)
        {
            if (!System.IO.File.Exists(@"RecentTunnels.xml")) return;
            var doc = new XmlDocument();
            const string path = @"RecentTunnels.xml";
            var setting = new XmlReaderSettings { DtdProcessing = DtdProcessing.Parse };

            XmlReader reader = XmlReader.Create(path, setting);

            doc.Load(reader);


            if (doc.DocumentElement != null)
            {
                XmlNodeList nodes = doc.DocumentElement.SelectNodes("/Tunnels/Tunnel");

                //List<TunnelSimple> tunnels = new List<TunnelSimple>();
                if (nodes != null)
                    foreach (XmlNode node in nodes)
                    {
                        var selectSingleNode = node.SelectSingleNode("ID");
                        if (selectSingleNode == null) continue;
                        var id = Convert.ToInt32(selectSingleNode.InnerText);
                        var tunnel = Tunnel.TryFind(id);
                        if (tunnel != null)
                            cbxTunnel.Items.Add(tunnel);
                    }
            }
        }

        /**
         *  Choose tunnel from the database.
         */
        private void btnChooseTunnel_Click(object sender, EventArgs e)
        {
            var dlg = new SelectTunnelDlg();
            if (DialogResult.OK != dlg.ShowDialog()) return;
            var tunnel = dlg.SelectedTunnel;
            cbxTunnel.Items.Add(tunnel);
            cbxTunnel.SelectedItem = tunnel;
            WriteRecentTunnelXml();
        }

        private void cbxTunnel_SelectedIndexChanged(object sender, EventArgs e)
        {
            SelectedTunnel = cbxTunnel.SelectedItem as Tunnel;
        }

        // 按delete键，删除选中的tunnel
        private void cbxTunnel_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                try
                {
                    int currentItem = cbxTunnel.SelectedIndex;
                    if (currentItem > 0)
                    {
                        cbxTunnel.Items.RemoveAt(currentItem);
                        if (cbxTunnel.Items.Count > 0)
                            cbxTunnel.SelectedIndex = (currentItem > 0) ? currentItem - 1 : currentItem;
                        WriteRecentTunnelXml();

                        // 覆盖RecentTunnels.xml
                        // Write the recent used tunnel to XML

                    }
                }
                catch (Exception ex)
                {
                    //Console.WriteLine(ex.ToString());
                    MessageBox.Show(@"删除错误: " + ex.Message);
                }
            }
        }




        private void WriteRecentTunnelXml()
        {
            var settings = new XmlWriterSettings { Indent = true };

            XmlWriter writer = XmlWriter.Create("RecentTunnels.xml", settings);
            writer.WriteStartDocument();
            writer.WriteComment("This file is generated by the program.");

            writer.WriteStartElement("Tunnels");

            for (int i = 1; i < cbxTunnel.Items.Count; i++)
            {
                var tunnel = cbxTunnel.Items[i] as Tunnel;
                writer.WriteStartElement("Tunnel");

                if (tunnel != null)
                    writer.WriteElementString("ID", tunnel.TunnelId.ToString(CultureInfo.InvariantCulture));   // <-- These are new
                writer.WriteEndElement();
            }

            writer.WriteEndElement();
            writer.WriteEndDocument();

            writer.Flush();
            writer.Close();
        }
    }
}
