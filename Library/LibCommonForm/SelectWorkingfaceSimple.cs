using System;
using System.Globalization;
using System.Linq;
using System.Windows.Forms;
using System.Xml;
using LibEntity;

namespace LibCommonForm
{
    public partial class SelectWorkingfaceSimple : UserControl
    {
        public SelectWorkingfaceSimple()
        {
            InitializeComponent();
        }

        public WorkingFace SelectedWorkingFace { get; set; }

        private void SelectTunnelSimple_Load(object sender, EventArgs e)
        {
            if (System.IO.File.Exists(@"RecentWorkingfaces.xml"))
            {
                var doc = new XmlDocument();
                doc.Load(@"RecentWorkingfaces.xml");

                if (doc.DocumentElement != null)
                {
                    var nodes = doc.DocumentElement.SelectNodes("/Workingfaces/Workingface");

                    if (nodes != null)
                        foreach (var workingface in from XmlNode node in nodes select node.SelectSingleNode("ID") into selectSingleNode where selectSingleNode != null select selectSingleNode.InnerText into id select WorkingFace.Find(id))
                        {
                            cbxWorkingface.Items.Add(workingface);
                        }
                }
            }
        }

        /**
         *  Choose tunnel from the database.
         */
        private void btnChooseTunnel_Click(object sender, EventArgs e)
        {
            var dlg = new SelectWorkingFaceDlg();
            if (DialogResult.OK != dlg.ShowDialog()) return;
            var workingFace = dlg.SelectedWorkingFace;
            cbxWorkingface.Items.Add(workingFace);
            cbxWorkingface.SelectedItem = workingFace;
            WriteRecentWorkingFaceXml();
        }

        public void cbxTunnel_SelectedIndexChanged(object sender, EventArgs e)
        {
            SelectedWorkingFace = cbxWorkingface.SelectedItem as WorkingFace;
        }

        // 按delete键，删除选中的tunnel
        private void cbxTunnel_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                try
                {
                    int currentItem = cbxWorkingface.SelectedIndex;
                    if (currentItem > 0)
                    {
                        cbxWorkingface.Items.RemoveAt(currentItem);
                        if (cbxWorkingface.Items.Count > 0)
                            cbxWorkingface.SelectedIndex = (currentItem > 0) ? currentItem - 1 : currentItem;
                        WriteRecentWorkingFaceXml();
                    }
                }
                catch (Exception ex)
                {
                    //Console.WriteLine(ex.ToString());
                    MessageBox.Show(@"删除错误: " + ex.Message);
                }
            }
        }

        private void WriteRecentWorkingFaceXml()
        {
            var settings = new XmlWriterSettings { Indent = true };

            var writer = XmlWriter.Create("RecentWorkingfaces.xml", settings);
            writer.WriteStartDocument();
            writer.WriteComment("This file is generated by the program.");

            writer.WriteStartElement("Workingfaces");

            for (var i = 1; i < cbxWorkingface.Items.Count; i++)
            {
                var toWriteWorkingFace = cbxWorkingface.Items[i] as WorkingFace;
                if (toWriteWorkingFace == null) continue;
                writer.WriteStartElement("Workingface");
                writer.WriteElementString("ID", toWriteWorkingFace.WorkingFaceId.ToString(CultureInfo.InvariantCulture));   // <-- These are new
                //writer.WriteElementString("Name", toWriteWorkingFace.WorkingFaceName);
                //writer.WriteElementString("Type", toWriteWorkingFace.WorkingfaceTypeEnum.ToString());
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
            writer.WriteEndDocument();

            writer.Flush();
            writer.Close();
        }
    }
}
